/* globals d3, Reveal, Image */

const circleTemplate = `
<path
  class="south lightgrey"
  d="m 50.015625,56.761701 a 50.000002,50.000002 0 0 0 -2.03125,1.164095 50.000002,50.000002 0 0 0 -4.064453,2.908233 50.000002,50.000002 0 0 0 -3.75586,3.298772 50.000002,50.000002 0 0 0 -3.40625,3.656315 50.000002,50.000002 0 0 0 -3.02539,3.978482 50.000002,50.000002 0 0 0 -2.611328,4.261719 50.000002,50.000002 0 0 0 -2.173828,4.499982 50.000002,50.000002 0 0 0 -1.714844,4.695307 50.000002,50.000002 0 0 0 -1.236328,4.841801 50.000002,50.000002 0 0 0 -0.513672,3.396511 A 49.999994,49.999994 0 0 0 50,100.00003 49.999994,49.999994 0 0 0 74.515625,93.498105 49.999998,49.999998 0 0 0 74.273437,91.502023 49.999998,49.999998 0 0 0 73.177732,86.624996 49.999998,49.999998 0 0 0 71.60156,81.882823 49.999998,49.999998 0 0 0 69.560546,77.320328 49.999998,49.999998 0 0 0 67.074217,72.984417 49.999998,49.999998 0 0 0 64.166014,68.920026 49.999998,49.999998 0 0 0 60.867186,65.16412 49.999998,49.999998 0 0 0 57.210936,61.757821 49.999998,49.999998 0 0 0 53.23242,58.732498 49.999998,49.999998 0 0 0 50.015625,56.761701 Z"/>
<path
  class="southwest lightgrey"
  d="m 25,50.000013 a 49.999994,49.999994 0 0 1 -0.250001,4.992189 49.999994,49.999994 0 0 1 -0.746094,4.941392 49.999994,49.999994 0 0 1 -1.236328,4.841802 49.999994,49.999994 0 0 1 -1.714844,4.695307 49.999994,49.999994 0 0 1 -2.173828,4.500019 49.999994,49.999994 0 0 1 -2.611328,4.261795 49.999994,49.999994 0 0 1 -3.02539,3.978482 49.999994,49.999994 0 0 1 -0.728516,0.781229 49.999994,49.999994 0 0 0 12.96875,10.47069 50.000002,50.000002 0 0 1 0.513672,-3.396511 50.000002,50.000002 0 0 1 1.236328,-4.841801 50.000002,50.000002 0 0 1 1.714844,-4.695307 50.000002,50.000002 0 0 1 2.173828,-4.499982 50.000002,50.000002 0 0 1 2.611328,-4.261719 50.000002,50.000002 0 0 1 3.02539,-3.978482 50.000002,50.000002 0 0 1 3.40625,-3.656315 50.000002,50.000002 0 0 1 3.75586,-3.298772 50.000002,50.000002 0 0 1 4.064453,-2.908233 50.000002,50.000002 0 0 1 2.03125,-1.164095 49.999998,49.999998 0 0 0 -1.044922,-0.640592 49.999998,49.999998 0 0 0 -4.5,-2.173795 A 49.999998,49.999998 0 0 0 39.77539,52.232505 49.999998,49.999998 0 0 0 34.933593,50.996108 49.999998,49.999998 0 0 0 29.992187,50.250029 49.999998,49.999998 0 0 0 25,50.000013 Z"/>
<path
  class="southeast lightgrey"
  d="m 75,50.000013 a 50.000002,50.000002 0 0 0 -3.537109,0.125103 50.000002,50.000002 0 0 0 -4.960938,0.603514 50.000002,50.000002 0 0 0 -4.876953,1.093796 50.000002,50.000002 0 0 0 -4.742188,1.576214 50.000002,50.000002 0 0 0 -4.5625,2.040983 50.000002,50.000002 0 0 0 -2.304687,1.322192 49.999998,49.999998 0 0 1 3.216797,1.970797 49.999998,49.999998 0 0 1 3.978516,3.025323 49.999998,49.999998 0 0 1 3.65625,3.406299 49.999998,49.999998 0 0 1 3.298828,3.755905 49.999998,49.999998 0 0 1 2.908203,4.064391 49.999998,49.999998 0 0 1 2.486328,4.335912 49.999998,49.999998 0 0 1 2.041015,4.562494 49.999998,49.999998 0 0 1 1.576172,4.742174 49.999998,49.999998 0 0 1 1.095704,4.877026 49.999998,49.999998 0 0 1 0.242188,1.996082 A 49.999994,49.999994 0 0 0 87.500001,82.976732 49.999998,49.999998 0 0 1 85.833985,81.08024 49.999998,49.999998 0 0 1 82.925782,77.015812 49.999998,49.999998 0 0 1 80.439454,72.679824 49.999998,49.999998 0 0 1 78.398438,68.117216 49.999998,49.999998 0 0 1 76.822266,63.375005 49.999998,49.999998 0 0 1 75.726562,58.49813 49.999998,49.999998 0 0 1 75.125,53.537122 49.999998,49.999998 0 0 1 75,50.000013 Z"/>
<path
  class="center lightgrey"
  d="m 49.984375,43.238325 a 49.999998,49.999998 0 0 1 -2.304687,1.322305 49.999998,49.999998 0 0 1 -4.5625,2.040983 A 49.999998,49.999998 0 0 1 38.375,48.177827 49.999998,49.999998 0 0 1 33.498047,49.273512 49.999998,49.999998 0 0 1 28.537109,49.875024 49.999998,49.999998 0 0 1 25,50.000127 a 49.999998,49.999998 0 0 1 4.992188,0.249826 49.999998,49.999998 0 0 1 4.941406,0.746079 49.999998,49.999998 0 0 1 4.841797,1.236397 49.999998,49.999998 0 0 1 4.695312,1.714809 49.999998,49.999998 0 0 1 4.5,2.173796 49.999998,49.999998 0 0 1 1.044922,0.640592 50.000002,50.000002 0 0 1 2.304687,-1.322192 50.000002,50.000002 0 0 1 4.5625,-2.040983 A 50.000002,50.000002 0 0 1 61.625,51.822237 50.000002,50.000002 0 0 1 66.501953,50.728441 50.000002,50.000002 0 0 1 71.462891,50.124927 50.000002,50.000002 0 0 1 75,49.999824 a 49.999998,49.999998 0 0 1 -4.992188,-0.249827 49.999998,49.999998 0 0 1 -4.941406,-0.746078 49.999998,49.999998 0 0 1 -4.841797,-1.236322 49.999998,49.999998 0 0 1 -4.695312,-1.714771 49.999998,49.999998 0 0 1 -4.5,-2.173909 49.999998,49.999998 0 0 1 -1.044922,-0.640592 z"/>
<path
  class="northwest lightgrey"
  d="m 25,50.000013 a 50.000002,50.000002 0 0 0 3.537109,-0.125102 50.000002,50.000002 0 0 0 4.960938,-0.601512 50.000002,50.000002 0 0 0 4.876953,-1.095685 50.000002,50.000002 0 0 0 4.742188,-1.576214 50.000002,50.000002 0 0 0 4.5625,-2.040983 50.000002,50.000002 0 0 0 2.304687,-1.322306 A 49.999998,49.999998 0 0 1 46.767578,41.26749 49.999998,49.999998 0 0 1 42.789062,38.242092 49.999998,49.999998 0 0 1 39.132812,34.835906 49.999998,49.999998 0 0 1 35.833984,31.08 49.999998,49.999998 0 0 1 32.925781,27.01561 49.999998,49.999998 0 0 1 30.439453,22.679584 49.999998,49.999998 0 0 1 28.398438,18.11709 49.999998,49.999998 0 0 1 26.822266,13.374917 49.999998,49.999998 0 0 1 25.726562,8.4980032 49.999998,49.999998 0 0 1 25.482423,6.4882016 49.999998,49.999998 0 0 0 12.486329,17.007685 a 49.999998,49.999998 0 0 1 1.679688,1.912214 49.999998,49.999998 0 0 1 2.908203,4.064391 49.999998,49.999998 0 0 1 2.486328,4.335912 49.999998,49.999998 0 0 1 2.041015,4.562494 49.999998,49.999998 0 0 1 1.576172,4.742211 49.999998,49.999998 0 0 1 1.095704,4.87699 49.999998,49.999998 0 0 1 0.601562,4.960894 49.999998,49.999998 0 0 1 0.125,3.537109 z"/>
<path
  class="northeast lightgrey"
  d="m 49.984375,43.238325 a 49.999998,49.999998 0 0 0 1.044922,0.640592 49.999998,49.999998 0 0 0 4.5,2.173909 49.999998,49.999998 0 0 0 4.695312,1.714771 49.999998,49.999998 0 0 0 4.841797,1.236322 49.999998,49.999998 0 0 0 4.941406,0.746078 A 49.999998,49.999998 0 0 0 75,49.999824 a 49.999998,49.999998 0 0 1 0.25,-4.992189 49.999998,49.999998 0 0 1 0.746094,-4.94143 49.999998,49.999998 0 0 1 1.236328,-4.841764 49.999998,49.999998 0 0 1 1.714844,-4.695307 49.999998,49.999998 0 0 1 2.173828,-4.500019 49.999998,49.999998 0 0 1 2.611328,-4.261682 49.999998,49.999998 0 0 1 3.02539,-3.978519 A 49.999998,49.999998 0 0 1 87.5,16.992038 49.999998,49.999998 0 0 0 74.519531,6.5213103 50.000002,50.000002 0 0 1 74.003906,9.93343 a 50.000002,50.000002 0 0 1 -1.236328,4.841802 50.000002,50.000002 0 0 1 -1.714844,4.695307 50.000002,50.000002 0 0 1 -2.173828,4.499981 50.000002,50.000002 0 0 1 -2.611328,4.261795 50.000002,50.000002 0 0 1 -3.02539,3.97852 50.000002,50.000002 0 0 1 -3.40625,3.656202 50.000002,50.000002 0 0 1 -3.75586,3.298771 50.000002,50.000002 0 0 1 -4.064453,2.908309 50.000002,50.000002 0 0 1 -2.03125,1.164019 z"/>
<path
  class="north lightgrey"
  d="m 49.984375,43.238325 a 50.000002,50.000002 0 0 0 2.03125,-1.164019 50.000002,50.000002 0 0 0 4.064453,-2.908309 50.000002,50.000002 0 0 0 3.75586,-3.298771 50.000002,50.000002 0 0 0 3.40625,-3.656202 50.000002,50.000002 0 0 0 3.02539,-3.97852 50.000002,50.000002 0 0 0 2.611328,-4.261795 50.000002,50.000002 0 0 0 2.173828,-4.499981 50.000002,50.000002 0 0 0 1.714844,-4.695307 A 50.000002,50.000002 0 0 0 74.003906,9.933619 50.000002,50.000002 0 0 0 74.519531,6.5214993 49.999998,49.999998 0 0 0 50,0 49.999998,49.999998 0 0 0 25.482422,6.488315 a 49.999998,49.999998 0 0 0 0.244139,2.0098016 49.999998,49.999998 0 0 0 1.095704,4.8769134 49.999998,49.999998 0 0 0 1.576172,4.742173 49.999998,49.999998 0 0 0 2.041015,4.562495 49.999998,49.999998 0 0 0 2.486328,4.336025 49.999998,49.999998 0 0 0 2.908203,4.064391 49.999998,49.999998 0 0 0 3.298828,3.755905 49.999998,49.999998 0 0 0 3.65625,3.406186 49.999998,49.999998 0 0 0 3.978516,3.025399 49.999998,49.999998 0 0 0 3.216798,1.970721 z"/>
<path
  class="eastoutline" fill="none" stroke-dasharray="3, 3" stroke-width="3"
  d="M 88.300197,19.177641 C 97.082131,29.291737 100.75035,43.293119 98.921816,56.475455 97.742663,65.34809 94.165031,73.961442 88.345203,80.798685 81.342021,72.786692 77.442269,62.267382 77.239571,51.651153 76.934721,39.986357 80.721115,28.124123 88.300197,19.177641 Z"/>
<path
  class="westoutline" fill="none" stroke-dasharray="3, 3" stroke-width="3"
  d="M 11.708841,19.177641 C 20.490775,29.291737 24.159,43.293119 22.33046,56.475455 21.151307,65.34809 17.573675,73.961442 11.753847,80.798685 4.7506641,72.786692 0.85091207,62.267382 0.64821407,51.651153 0.34336407,39.986357 4.1297581,28.124123 11.708841,19.177641 Z"/>
<path
  class="southeasteast lightgrey"
  d="m 99.544922,56.472719 a 50.000002,50.000002 0 0 0 -0.57422,-0.351496 50.000002,50.000002 0 0 0 -4.5,-2.173796 A 50.000002,50.000002 0 0 0 89.775391,52.232618 50.000002,50.000002 0 0 0 84.933594,50.996221 50.000002,50.000002 0 0 0 79.992188,50.250142 50.000002,50.000002 0 0 0 75,50.000013 a 49.999998,49.999998 0 0 0 0.125,3.537109 49.999998,49.999998 0 0 0 0.601562,4.961008 49.999998,49.999998 0 0 0 1.095704,4.876875 49.999998,49.999998 0 0 0 1.576172,4.742211 49.999998,49.999998 0 0 0 2.041015,4.562495 49.999998,49.999998 0 0 0 2.486328,4.335987 49.999998,49.999998 0 0 0 2.908203,4.064429 A 49.999998,49.999998 0 0 0 87.5,82.976618 49.999998,49.999998 0 0 0 99.544922,56.472719 Z"/>
<path
  class="east lightgrey"
  d="m 99.515623,43.507805 a 49.999998,49.999998 0 0 1 -1.835936,1.052825 49.999998,49.999998 0 0 1 -4.562498,2.040983 49.999998,49.999998 0 0 1 -4.742188,1.576214 49.999998,49.999998 0 0 1 -4.876954,1.095685 49.999998,49.999998 0 0 1 -4.960938,0.601512 A 49.999998,49.999998 0 0 1 75,50.000127 a 50.000002,50.000002 0 0 1 4.992188,0.249826 50.000002,50.000002 0 0 1 4.941406,0.746079 50.000002,50.000002 0 0 1 4.841797,1.236397 50.000002,50.000002 0 0 1 4.695311,1.714809 50.000002,50.000002 0 0 1 4.5,2.173796 50.000002,50.000002 0 0 1 0.57422,0.351496 A 49.999998,49.999998 0 0 0 100,50.000013 49.999998,49.999998 0 0 0 99.515623,43.507805 Z"/>
<path
  class="northeasteast lightgrey"
  d="m 75,50.000013 a 50.000002,50.000002 0 0 0 3.537109,-0.125102 50.000002,50.000002 0 0 0 4.960938,-0.601512 50.000002,50.000002 0 0 0 4.876954,-1.095685 50.000002,50.000002 0 0 0 4.742188,-1.576214 50.000002,50.000002 0 0 0 4.562498,-2.040983 50.000002,50.000002 0 0 0 1.835936,-1.052825 A 49.999998,49.999998 0 0 0 87.5,16.992114 a 49.999998,49.999998 0 0 0 -0.742188,0.796875 49.999998,49.999998 0 0 0 -3.02539,3.97852 49.999998,49.999998 0 0 0 -2.611328,4.261682 49.999998,49.999998 0 0 0 -2.173828,4.500019 49.999998,49.999998 0 0 0 -1.714844,4.695307 49.999998,49.999998 0 0 0 -1.236328,4.841764 A 49.999998,49.999998 0 0 0 75.25,45.007711 49.999998,49.999998 0 0 0 75,50.000013 Z"/>
<path
  class="southwestwest lightgrey"
  d="m 25,50.000013 a 50.000002,50.000002 0 0 0 -3.537109,0.125103 50.000002,50.000002 0 0 0 -4.960938,0.603514 50.000002,50.000002 0 0 0 -4.876954,1.093796 50.000002,50.000002 0 0 0 -4.7421882,1.576214 50.000002,50.000002 0 0 0 -4.5624983,2.040983 50.000002,50.000002 0 0 0 -1.83203155,1.050784 49.999998,49.999998 0 0 0 12.02539105,26.501934 49.999998,49.999998 0 0 0 0.728516,-0.781228 49.999998,49.999998 0 0 0 3.02539,-3.978482 49.999998,49.999998 0 0 0 2.611328,-4.261796 49.999998,49.999998 0 0 0 2.173828,-4.500018 49.999998,49.999998 0 0 0 1.714844,-4.695308 49.999998,49.999998 0 0 0 1.236328,-4.841801 A 49.999998,49.999998 0 0 0 24.75,54.992316 49.999998,49.999998 0 0 0 25,50.000013 Z"/>
<path
  class="west lightgrey"
  d="M 0.44921953,43.523528 A 49.999998,49.999998 0 0 0 0,50.000013 49.999998,49.999998 0 0 0 0.48828095,56.490294 50.000002,50.000002 0 0 1 2.3203125,55.439509 50.000002,50.000002 0 0 1 6.8828108,53.398527 50.000002,50.000002 0 0 1 11.624999,51.822312 50.000002,50.000002 0 0 1 16.501953,50.728517 50.000002,50.000002 0 0 1 21.462891,50.125002 50.000002,50.000002 0 0 1 25,49.9999 49.999998,49.999998 0 0 1 20.007812,49.750073 49.999998,49.999998 0 0 1 15.066406,49.003994 49.999998,49.999998 0 0 1 10.224609,47.767673 49.999998,49.999998 0 0 1 5.5292977,46.052901 49.999998,49.999998 0 0 1 1.0292976,43.878993 49.999998,49.999998 0 0 1 0.44921953,43.523717 Z"/>
<path
  class="northwestwest lightgrey"
  d="m 0.44921953,43.523528 a 50.000002,50.000002 0 0 0 0.58007807,0.355276 50.000002,50.000002 0 0 0 4.5000001,2.173908 50.000002,50.000002 0 0 0 4.6953113,1.714772 50.000002,50.000002 0 0 0 4.841797,1.236321 50.000002,50.000002 0 0 0 4.941406,0.746079 A 50.000002,50.000002 0 0 0 25,49.999711 49.999998,49.999998 0 0 0 24.874999,46.462602 49.999998,49.999998 0 0 0 24.273438,41.501708 49.999998,49.999998 0 0 0 23.177733,36.624719 49.999998,49.999998 0 0 0 21.601562,31.882507 49.999998,49.999998 0 0 0 19.560547,27.320013 49.999998,49.999998 0 0 0 17.074219,22.984101 49.999998,49.999998 0 0 0 14.166016,18.91971 49.999998,49.999998 0 0 0 12.486327,17.007496 49.999998,49.999998 0 0 0 0.44921953,43.523226 Z"/>
`;

let allBuilds = {};

function addBuild (sectionId, buildSteps) {
  // Preload the images and determine their native sizes
  buildSteps.forEach((step, stepNo) => {
    Object.keys(step.images || {}).forEach(imageName => {
      let i = new Image();
      i.addEventListener('load', () => {
        allBuilds[sectionId].buildSteps[stepNo].images[imageName].width = i.width;
        allBuilds[sectionId].buildSteps[stepNo].images[imageName].height = i.height;
      });
      i.src = step.images[imageName].src;
    });
  });
  // Add dummy fragments
  let fragments = d3.select('#' + sectionId).selectAll('.dummy')
    .data(buildSteps.slice(1)); // don't add a fragment for the first step
  fragments.exit().remove();
  fragments = fragments.enter().append('div')
    .attr('class', 'dummy fragment')
    .attr('data-step', (d, i) => i + 1)
    .merge(fragments);
  function callback (event) {
    let stepNo = parseInt(event.fragment.dataset.step);
    if (!stepNo) {
      Reveal.removeEventListener('fragmentshown', callback);
      return;
    }
    handleStep(sectionId, stepNo);
    if (stepNo >= buildSteps.length - 1) {
      Reveal.removeEventListener('fragmentshown', callback);
    }
  }
  allBuilds[sectionId] = {
    sectionId,
    buildSteps,
    callback
  };
}

function getTransformString (objSpec, svgBounds) {
  let x = objSpec.x;
  let y = objSpec.y;
  let scale = objSpec.scale;
  let width = objSpec.width || 100;
  let height = objSpec.height || 100;

  return 'translate(' + (x * svgBounds.width - (width / 2) * scale) +
    ',' + (y * svgBounds.height - (height / 2) * scale) +
    ') scale(' + scale + ')';
}

function handleStep (sectionId, stepNo) {
  let imageNotLoaded = false;
  let step = allBuilds[sectionId].buildSteps[stepNo];
  step.showBuildTags = step.showBuildTags || [];
  step.circles = step.circles || {};
  step.images = step.images || {};
  Object.keys(step.images).some(imageName => {
    if (step.images[imageName].width === undefined ||
        step.images[imageName].height === undefined) {
      imageNotLoaded = true;
      return true;
    }
  });
  let prevStep = allBuilds[sectionId].buildSteps[stepNo - 1] || null;
  if (prevStep) {
    prevStep.showBuildTags = step.showBuildTags || [];
    prevStep.circles = prevStep.circles || {};
    prevStep.images = prevStep.images || {};
    Object.keys(prevStep.images).some(imageName => {
      if (prevStep.images[imageName].width === undefined ||
          prevStep.images[imageName].height === undefined) {
        imageNotLoaded = true;
        return true;
      }
    });
  }
  if (imageNotLoaded) {
    console.log('waiting a sec for images to load...');
    window.setTimeout(() => { handleStep(sectionId, stepNo); }, 200);
    return;
  }

  let t = d3.transition()
    .duration(1000);

  let svg = d3.select('#' + sectionId + ' svg');
  let svgBounds = {
    width: parseFloat(svg.attr('width')),
    height: parseFloat(svg.attr('height'))
  };

  // show / hide elements with a data-build attribute
  svg.selectAll('[data-build]')
    .attr('opacity', function () {
      let temp = prevStep || step;
      return Math.min(1, temp.showBuildTags.indexOf(this.dataset.build) + 1);
    }).transition(t)
    .attr('opacity', function () {
      return Math.min(1, step.showBuildTags.indexOf(this.dataset.build) + 1);
    });

  // create / update image tags
  let images = svg.selectAll('.bridgeModelImage')
    .data(d3.entries(step.images), d => d.key);
  images.exit()
    .transition(t)
    .attr('opacity', 0)
    .remove();
  let imagesEnter = images.enter().append('g')
    .attr('opacity', 0)
    .classed('bridgeModelImage', true);
  images = images.merge(imagesEnter);

  imagesEnter.append('rect');
  images.select('rect')
    .attr('width', d => d.value.width)
    .attr('height', d => d.value.height);
  imagesEnter.append('image');
  images.select('image')
    .attr('xlink:href', d => d.value.src);

  images.attr('transform', (d) => {
    let prevImage = prevStep && prevStep.images[d.key];
    prevImage = prevImage || d.value;
    return getTransformString(prevImage, svgBounds);
  }).transition(t)
    .attr('opacity', 1)
    .attr('transform', d => getTransformString(d.value, svgBounds));

  // create / update circles
  let circles = svg.selectAll('.bridgeModelCircle')
    .data(d3.entries(step.circles), d => d.key);
  circles.exit()
    .transition(t)
    .attr('opacity', 0)
    .remove();
  let circlesEnter = circles.enter().append('g')
    .attr('opacity', 0)
    .classed('bridgeModelCircle', true)
    .html(circleTemplate);
  circles = circles.merge(circlesEnter);

  circles.each(function (d) {
    // color change transitions are handled by CSS...
    // we can get away with just swapping the class names
    Array.from(this.children).forEach(sliceElement => {
      let sliceName = sliceElement.getAttribute('class').split(' ')[0];
      let extraClasses = d.value.colors[sliceName] || 'invisible';
      sliceElement.setAttribute('class', sliceName + ' ' + extraClasses);
    });
  });

  circles.attr('transform', d => {
    let prevCircle = prevStep && prevStep.circles[d.key];
    prevCircle = prevCircle || d.value;
    return getTransformString(prevCircle, svgBounds);
  }).transition(t)
    .attr('opacity', 1)
    .attr('transform', d => getTransformString(d.value, svgBounds));

  // An ugly hack to pop elements to the front that need to
  // be in front
  Array.from(svg.node().children)
    .forEach(el => {
      let datum = d3.select(el).datum();
      if (datum && datum.value && datum.value.popFront) {
        svg.node().appendChild(el);
        // appendChild doesn't make a copy; it just moves it to the end
      }
      // ugly hack #2: always push data-build elements to the front
      if (step.popBuildTags && el.dataset && el.dataset.build) {
        svg.node().appendChild(el);
      }
    });

  // Finally, check if we're supposed to auto-advance after this step
  if (step.autoNext) {
    t.on('end', () => { Reveal.next(); });
  }
}
